{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"easterobot Discord bot for easter. Documentation Documentation is available on https://dashstrom.github.io/easterobot . Installation # Using pip pip install easterobot # Using uv (install in your project dependencies) uv add easterobot # Using pipx (install as a tool in a venv) pipx install easterobot # Using uv (install as a tool in a venv) uv tool install easterobot Usage as CLI Once installed, you can use it directly. easterobot run -t YOU_MUST_PUT_YOUR_TOKEN_HERE Or you can generate a custom configuration for your own needs ! easterobot generate -i data easterobot run -c data/config.yml Usage with Docker You can install easterobot using uv from PyPI . git clone https://github.com/Dashstrom/easterobot cd easterobot echo \"DISCORD_TOKEN=YOU_MUST_PUT_YOUR_TOKEN_HERE\" > .env # Can be unsafe (and for each update) chmod -R 700 . && mkdir data -p && chmod 777 data # Run the docker container docker compose up -d # Stop it docker compose stop # Remove the container (not the data) docker compose down --rmi all # Update git reset --hard HEAD && git pull # One-line update docker compose down --rmi all && git reset --hard HEAD && git pull && chmod -R 700 . && mkdir data -p && chmod 777 data && docker compose up -d Configuration directory data Root directory \u251c\u2500\u2500 .gitignore Avoid pushing sensitive data \u251c\u2500\u2500 config.yml Configuration file \u251c\u2500\u2500 easterobot.db Database \u251c\u2500\u2500 logs Logging directory \u2502 \u251c\u2500\u2500 easterobot.log Latest log file \u2502 \u2514\u2500\u2500 easterobot.log.1 Rotating log file \u2514\u2500\u2500 resources Resource directory \u251c\u2500\u2500 config.example.yml An example of config \u251c\u2500\u2500 credits.txt Credits of emotes \u251c\u2500\u2500 emotes Directory loaded as application emotes \u2502 \u251c\u2500\u2500 eggs Directory for eggs \u2502 | \u2514\u2500\u2500 egg_01.png Emoji to use for egg \u2502 \u251c\u2500\u2500 icons Misc emotes to load \u2502 \u2502 \u2514\u2500\u2500 arrow.png Emoji used in messages \u2502 \u251c\u2500\u2500 placements Directory for emoji used in grid \u2502 \u2502 \u2514\u2500\u2500 s1.png Single blue emoji with one on it \u2502 \u2514\u2500\u2500 skyjo Skyjo cards \u2502 \u2514\u2500\u2500 skyjo_m1.png Card with minus -1 with deep blue \u251c\u2500\u2500 logging.conf Logging configuration \u251c\u2500\u2500 alembic.ini Configure for alembic \u2514\u2500\u2500 logo.png Logo used by the bot Development Contributing Contributions are very welcome. Tests can be run with poe check , please ensure the coverage at least stays the same before you submit a pull request. Prerequisite First, You need to install git following the official guide and configure it. Then, you need to install uv and update shell path with this command: uv tool update-shell Finally, run these commands for setup the project with dev dependencies. git clone https://github.com/Dashstrom/easterobot cd easterobot uv sync --all-extras --python 3.10 uv run poe setup Poe Poe is available for help you to run tasks: uv run poe {task} or poe task within the venv. test Run test suite. lint Run linters: ruff checker and ruff formatter and mypy. format Run linters in fix mode. check Run all checks: lint, test and docs. check-tag Check if the current tag match the version. cov Run coverage for generate report and html. open-cov Open html coverage report in webbrowser. doc Build documentation. open-doc Open documentation in webbrowser. setup Setup pre-commit. pre-commit Run pre-commit. clean Clean cache files. How to add dependency uv add 'PACKAGE' Ignore illegitimate warnings To ignore illegitimate warnings you can add : # noqa: ERROR_CODE on the same line for ruff. # type: ignore[ERROR_CODE] on the same line for mypy. # pragma: no cover on the same line to ignore line for coverage. # doctest: +SKIP on the same line for doctest. Install as service E_NOTROOT=87 # Non-root exit error. E_INSTALLED=1 if ! $(sudo -l &> /dev/null); then >&2 echo 'Error: root privileges are needed to run this script' exit $E_NOTROOT fi if ! id easterobot >/dev/null 2>&1; then useradd --system --create-home --home-dir /home/easterobot easterobot fi if [ ! -d /home/easterobot/easterobot ]; then sudo -u easterobot -g easterobot -- git clone https://github.com/Dashstrom/easterobot /home/easterobot/easterobot fi cd /home/easterobot/easterobot systemctl disable easterobot || true systemctl stop easterobot || true sudo -u easterobot -g easterobot -- git pull sudo -u easterobot -g easterobot -- python3 -m venv /home/easterobot/easterobot/.venv sudo -u easterobot -g easterobot -- /home/easterobot/easterobot/.venv/bin/python3 -m pip install . sudo -u easterobot -g easterobot -- /home/easterobot/easterobot/.venv/bin/easterobot generate -i /home/easterobot/easterobot/data if [ ! -f /lib/systemd/system/easterobot.service ]; then mkdir -p /lib/systemd/system cat > /lib/systemd/system/easterobot.service << EOF [Unit] Description=Easterobot After=network-online.target [Service] Type=exec ExecStart=/home/easterobot/easterobot/.venv/bin/easterobot run -c /home/easterobot/easterobot/data/config.yml WorkingDirectory=/home/easterobot/easterobot StandardOutput=inherit StandardError=inherit Restart=always User=easterobot [Install] WantedBy=multi-user.target EOF systemctl daemon-reload fi systemctl enable easterobot systemctl start easterobot systemctl status easterobot License This work is licensed under MIT .","title":"Home"},{"location":"#easterobot","text":"Discord bot for easter.","title":"easterobot"},{"location":"#documentation","text":"Documentation is available on https://dashstrom.github.io/easterobot .","title":"Documentation"},{"location":"#installation","text":"# Using pip pip install easterobot # Using uv (install in your project dependencies) uv add easterobot # Using pipx (install as a tool in a venv) pipx install easterobot # Using uv (install as a tool in a venv) uv tool install easterobot","title":"Installation"},{"location":"#usage-as-cli","text":"Once installed, you can use it directly. easterobot run -t YOU_MUST_PUT_YOUR_TOKEN_HERE Or you can generate a custom configuration for your own needs ! easterobot generate -i data easterobot run -c data/config.yml","title":"Usage as CLI"},{"location":"#usage-with-docker","text":"You can install easterobot using uv from PyPI . git clone https://github.com/Dashstrom/easterobot cd easterobot echo \"DISCORD_TOKEN=YOU_MUST_PUT_YOUR_TOKEN_HERE\" > .env # Can be unsafe (and for each update) chmod -R 700 . && mkdir data -p && chmod 777 data # Run the docker container docker compose up -d # Stop it docker compose stop # Remove the container (not the data) docker compose down --rmi all # Update git reset --hard HEAD && git pull # One-line update docker compose down --rmi all && git reset --hard HEAD && git pull && chmod -R 700 . && mkdir data -p && chmod 777 data && docker compose up -d","title":"Usage with Docker"},{"location":"#configuration-directory","text":"data Root directory \u251c\u2500\u2500 .gitignore Avoid pushing sensitive data \u251c\u2500\u2500 config.yml Configuration file \u251c\u2500\u2500 easterobot.db Database \u251c\u2500\u2500 logs Logging directory \u2502 \u251c\u2500\u2500 easterobot.log Latest log file \u2502 \u2514\u2500\u2500 easterobot.log.1 Rotating log file \u2514\u2500\u2500 resources Resource directory \u251c\u2500\u2500 config.example.yml An example of config \u251c\u2500\u2500 credits.txt Credits of emotes \u251c\u2500\u2500 emotes Directory loaded as application emotes \u2502 \u251c\u2500\u2500 eggs Directory for eggs \u2502 | \u2514\u2500\u2500 egg_01.png Emoji to use for egg \u2502 \u251c\u2500\u2500 icons Misc emotes to load \u2502 \u2502 \u2514\u2500\u2500 arrow.png Emoji used in messages \u2502 \u251c\u2500\u2500 placements Directory for emoji used in grid \u2502 \u2502 \u2514\u2500\u2500 s1.png Single blue emoji with one on it \u2502 \u2514\u2500\u2500 skyjo Skyjo cards \u2502 \u2514\u2500\u2500 skyjo_m1.png Card with minus -1 with deep blue \u251c\u2500\u2500 logging.conf Logging configuration \u251c\u2500\u2500 alembic.ini Configure for alembic \u2514\u2500\u2500 logo.png Logo used by the bot","title":"Configuration directory"},{"location":"#development","text":"","title":"Development"},{"location":"#contributing","text":"Contributions are very welcome. Tests can be run with poe check , please ensure the coverage at least stays the same before you submit a pull request.","title":"Contributing"},{"location":"#prerequisite","text":"First, You need to install git following the official guide and configure it. Then, you need to install uv and update shell path with this command: uv tool update-shell Finally, run these commands for setup the project with dev dependencies. git clone https://github.com/Dashstrom/easterobot cd easterobot uv sync --all-extras --python 3.10 uv run poe setup","title":"Prerequisite"},{"location":"#poe","text":"Poe is available for help you to run tasks: uv run poe {task} or poe task within the venv. test Run test suite. lint Run linters: ruff checker and ruff formatter and mypy. format Run linters in fix mode. check Run all checks: lint, test and docs. check-tag Check if the current tag match the version. cov Run coverage for generate report and html. open-cov Open html coverage report in webbrowser. doc Build documentation. open-doc Open documentation in webbrowser. setup Setup pre-commit. pre-commit Run pre-commit. clean Clean cache files.","title":"Poe"},{"location":"#how-to-add-dependency","text":"uv add 'PACKAGE'","title":"How to add dependency"},{"location":"#ignore-illegitimate-warnings","text":"To ignore illegitimate warnings you can add : # noqa: ERROR_CODE on the same line for ruff. # type: ignore[ERROR_CODE] on the same line for mypy. # pragma: no cover on the same line to ignore line for coverage. # doctest: +SKIP on the same line for doctest.","title":"Ignore illegitimate warnings"},{"location":"#install-as-service","text":"E_NOTROOT=87 # Non-root exit error. E_INSTALLED=1 if ! $(sudo -l &> /dev/null); then >&2 echo 'Error: root privileges are needed to run this script' exit $E_NOTROOT fi if ! id easterobot >/dev/null 2>&1; then useradd --system --create-home --home-dir /home/easterobot easterobot fi if [ ! -d /home/easterobot/easterobot ]; then sudo -u easterobot -g easterobot -- git clone https://github.com/Dashstrom/easterobot /home/easterobot/easterobot fi cd /home/easterobot/easterobot systemctl disable easterobot || true systemctl stop easterobot || true sudo -u easterobot -g easterobot -- git pull sudo -u easterobot -g easterobot -- python3 -m venv /home/easterobot/easterobot/.venv sudo -u easterobot -g easterobot -- /home/easterobot/easterobot/.venv/bin/python3 -m pip install . sudo -u easterobot -g easterobot -- /home/easterobot/easterobot/.venv/bin/easterobot generate -i /home/easterobot/easterobot/data if [ ! -f /lib/systemd/system/easterobot.service ]; then mkdir -p /lib/systemd/system cat > /lib/systemd/system/easterobot.service << EOF [Unit] Description=Easterobot After=network-online.target [Service] Type=exec ExecStart=/home/easterobot/easterobot/.venv/bin/easterobot run -c /home/easterobot/easterobot/data/config.yml WorkingDirectory=/home/easterobot/easterobot StandardOutput=inherit StandardError=inherit Restart=always User=easterobot [Install] WantedBy=multi-user.target EOF systemctl daemon-reload fi systemctl enable easterobot systemctl start easterobot systemctl status easterobot","title":"Install as service"},{"location":"#license","text":"This work is licensed under MIT .","title":"License"},{"location":"developer_interface/","text":"Developer Interface easterobot Init module of easterobot. Easterobot Bases: Bot Main Easterobot Discord bot class. Source code in easterobot/bot.pyclass Easterobot ( discord . ext . commands . Bot ): \"\"\"Main Easterobot Discord bot class.\"\"\" owner : discord . User game : GameCog hunt : HuntCog init_finished : asyncio . Event def __init__ ( self , config : MConfig ) -> None : \"\"\"Initialize the Easterobot instance. Args: config: Loaded bot configuration. \"\"\" intents = discord . Intents . default () if config . message_content : intents . message_content = True # Suppress NaCl warnings for voice discord . VoiceClient . warn_nacl = False super () . __init__ ( command_prefix = \".\" , description = \"Bot Discord pour faire la chasse aux \u0153ufs\" , activity = discord . Game ( name = \"rechercher des \u0153ufs\" ), intents = INTENTS , ) self . app_commands : list [ discord . app_commands . AppCommand ] = [] self . app_emojis : dict [ str , discord . Emoji ] = {} self . config = config self . config . configure_logging () # Ensure database schema is up-to-date upgrade ( self . config . alembic_config (), \"head\" ) logger . info ( \"Opening database %s \" , self . config . database_uri ) self . engine = create_async_engine ( self . config . database_uri , echo = False , ) @classmethod def from_config ( cls , path : Union [ str , Path ] = DEFAULT_CONFIG_PATH , * , token : Optional [ str ] = None , env : bool = False , ) -> \"Easterobot\" : \"\"\"Create an instance from a configuration file. Args: path: Path to the configuration file. token: Bot token override. env: If True, load configuration from environment variables. Returns: An initialized `Easterobot` instance. \"\"\" config = load_config_from_path ( path , token = token , env = env ) return Easterobot ( config ) @classmethod def generate ( cls , destination : Union [ Path , str ], * , token : Optional [ str ] = None , env : bool = False , interactive : bool = False , ) -> \"Easterobot\" : \"\"\"Generate a new bot configuration and resources. Args: destination: Directory where the bot's data will be created. token: Bot token override. env: If True, load configuration from environment variables. interactive: If True, prompt user for the bot token. Returns: An initialized `Easterobot` instance. \"\"\" destination = Path ( destination ) . resolve () destination . mkdir ( parents = True , exist_ok = True ) config_data = EXAMPLE_CONFIG_PATH . read_bytes () config = load_config_from_buffer ( config_data , token = token , env = env ) config . attach_default_working_directory ( destination ) if interactive : while True : try : config . verified_token () break except ( ValueError , TypeError ): config . token = getpass ( \"Token: \" ) # Create resources directory config . _resources = pathlib . Path ( \"resources\" ) # noqa: SLF001 shutil . copytree ( RESOURCES , destination / \"resources\" , dirs_exist_ok = True ) # Save configuration config_path = destination / \"config.yml\" config_path . write_bytes ( dump_yaml ( config )) ( destination / \".gitignore\" ) . write_bytes ( b \"* \\n \" ) return Easterobot ( config ) def is_super_admin ( self , user : Union [ discord . User , discord . Member ], ) -> bool : \"\"\"Check whether a user is a super admin. Args: user: The Discord user or member to check. Returns: True if the user is a super admin, False otherwise. \"\"\" return ( user . id in self . config . admins or user . id in ( self . owner . id , self . owner_id ) or ( self . owner_ids is not None and user . id in self . owner_ids ) ) async def resolve_channel ( self , channel_id : int , ) -> Optional [ discord . TextChannel ]: \"\"\"Get a text channel by its ID. Args: channel_id: ID of the channel to fetch. Returns: The corresponding text channel, or None if unavailable. \"\"\" channel = self . get_channel ( channel_id ) if channel is None : try : channel = await self . fetch_channel ( channel_id ) except ( discord . NotFound , discord . Forbidden ): return None if not isinstance ( channel , discord . TextChannel ): return None return channel async def setup_hook ( self ) -> None : \"\"\"Load bot extensions (commands, games, hunts).\"\"\" await self . load_extension ( \"easterobot.commands\" , package = \"easterobot.commands.__init__\" ) await self . load_extension ( \"easterobot.games\" , package = \"easterobot.games.__init__\" ) await self . load_extension ( \"easterobot.hunts\" , package = \"easterobot.hunts.__init__\" ) def auto_run ( self ) -> None : \"\"\"Start the bot using the verified token.\"\"\" self . run ( token = self . config . verified_token ()) async def start ( self , token : str , * , reconnect : bool = True ) -> None : \"\"\"Start the bot and initialize the ready event. Args: token: Bot authentication token. reconnect: Whether to automatically reconnect on disconnect. \"\"\" self . init_finished = asyncio . Event () await super () . start ( token = token , reconnect = reconnect ) async def on_ready ( self ) -> None : \"\"\"Handle the bot ready event. This may trigger multiple times if the bot reconnects. \"\"\" logger . info ( \"Syncing commands...\" ) await self . tree . sync () self . app_commands = await self . tree . fetch_commands () # Sync bot owner app_info = await self . application_info () self . owner = app_info . owner logger . info ( \"Owner is %s ( %s )\" , self . owner . display_name , self . owner . id ) # Load emojis await self . _load_emojis () # Load eggs eggs_path = ( self . config . resources / \"emotes\" / \"eggs\" ) . resolve () self . egg_emotes = RandomItem ( [ self . app_emojis [ path . stem ] for path in eggs_path . glob ( \"**/*\" )] ) # Log all available guilds async for guild in self . fetch_guilds (): logger . info ( \"Guild %s ( %s )\" , guild , guild . id ) # Log user logger . info ( \"Logged in as %s ( %s )\" , self . user , getattr ( self . user , \"id\" , \"unknown\" ), ) # Set init event as finished self . init_finished . set () async def _load_emojis ( self ) -> None : \"\"\"Load or create application emojis from resource files.\"\"\" emojis = { emoji . name : emoji for emoji in await self . fetch_application_emojis () } emotes_path = ( self . config . resources / \"emotes\" ) . resolve () # TODO(dashstrom): Remove outdated emojis. # TODO(dashstrom): Implement emoji caching. self . app_emojis = {} for emote in emotes_path . glob ( \"**/*\" ): if not emote . is_file (): continue name = emote . stem if name not in emojis : logger . info ( \"Missing emoji %s , creating on application...\" , name , ) image_data = emote . read_bytes () emoji = await self . create_application_emoji ( name = name , image = image_data , ) self . app_emojis [ name ] = emoji else : logger . info ( \"Loaded emoji %s \" , name ) self . app_emojis [ name ] = emojis [ name ] __init__ __init__ ( config : MConfig ) -> None Initialize the Easterobot instance. Parameters: config ( MConfig ) \u2013 Loaded bot configuration. Source code in easterobot/bot.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def __init__ ( self , config : MConfig ) -> None : \"\"\"Initialize the Easterobot instance. Args: config: Loaded bot configuration. \"\"\" intents = discord . Intents . default () if config . message_content : intents . message_content = True # Suppress NaCl warnings for voice discord . VoiceClient . warn_nacl = False super () . __init__ ( command_prefix = \".\" , description = \"Bot Discord pour faire la chasse aux \u0153ufs\" , activity = discord . Game ( name = \"rechercher des \u0153ufs\" ), intents = INTENTS , ) self . app_commands : list [ discord . app_commands . AppCommand ] = [] self . app_emojis : dict [ str , discord . Emoji ] = {} self . config = config self . config . configure_logging () # Ensure database schema is up-to-date upgrade ( self . config . alembic_config (), \"head\" ) logger . info ( \"Opening database %s \" , self . config . database_uri ) self . engine = create_async_engine ( self . config . database_uri , echo = False , ) auto_run auto_run () -> None Start the bot using the verified token. Source code in easterobot/bot.py 205 206 207 def auto_run ( self ) -> None : \"\"\"Start the bot using the verified token.\"\"\" self . run ( token = self . config . verified_token ()) from_config classmethod from_config ( path : Union [ str , Path ] = DEFAULT_CONFIG_PATH , * , token : Optional [ str ] = None , env : bool = False , ) -> Easterobot Create an instance from a configuration file. Parameters: path ( Union [ str , Path ] , default: DEFAULT_CONFIG_PATH ) \u2013 Path to the configuration file. token ( Optional [ str ] , default: None ) \u2013 Bot token override. env ( bool , default: False ) \u2013 If True, load configuration from environment variables. Returns: Easterobot \u2013 An initialized Easterobot instance. Source code in easterobot/bot.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 @classmethod def from_config ( cls , path : Union [ str , Path ] = DEFAULT_CONFIG_PATH , * , token : Optional [ str ] = None , env : bool = False , ) -> \"Easterobot\" : \"\"\"Create an instance from a configuration file. Args: path: Path to the configuration file. token: Bot token override. env: If True, load configuration from environment variables. Returns: An initialized `Easterobot` instance. \"\"\" config = load_config_from_path ( path , token = token , env = env ) return Easterobot ( config ) generate classmethod generate ( destination : Union [ Path , str ], * , token : Optional [ str ] = None , env : bool = False , interactive : bool = False , ) -> Easterobot Generate a new bot configuration and resources. Parameters: destination ( Union [ Path , str ] ) \u2013 Directory where the bot's data will be created. token ( Optional [ str ] , default: None ) \u2013 Bot token override. env ( bool , default: False ) \u2013 If True, load configuration from environment variables. interactive ( bool , default: False ) \u2013 If True, prompt user for the bot token. Returns: Easterobot \u2013 An initialized Easterobot instance. Source code in easterobot/bot.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 @classmethod def generate ( cls , destination : Union [ Path , str ], * , token : Optional [ str ] = None , env : bool = False , interactive : bool = False , ) -> \"Easterobot\" : \"\"\"Generate a new bot configuration and resources. Args: destination: Directory where the bot's data will be created. token: Bot token override. env: If True, load configuration from environment variables. interactive: If True, prompt user for the bot token. Returns: An initialized `Easterobot` instance. \"\"\" destination = Path ( destination ) . resolve () destination . mkdir ( parents = True , exist_ok = True ) config_data = EXAMPLE_CONFIG_PATH . read_bytes () config = load_config_from_buffer ( config_data , token = token , env = env ) config . attach_default_working_directory ( destination ) if interactive : while True : try : config . verified_token () break except ( ValueError , TypeError ): config . token = getpass ( \"Token: \" ) # Create resources directory config . _resources = pathlib . Path ( \"resources\" ) # noqa: SLF001 shutil . copytree ( RESOURCES , destination / \"resources\" , dirs_exist_ok = True ) # Save configuration config_path = destination / \"config.yml\" config_path . write_bytes ( dump_yaml ( config )) ( destination / \".gitignore\" ) . write_bytes ( b \"* \\n \" ) return Easterobot ( config ) is_super_admin is_super_admin ( user : Union [ User , Member ]) -> bool Check whether a user is a super admin. Parameters: user ( Union [ User , Member ] ) \u2013 The Discord user or member to check. Returns: bool \u2013 True if the user is a super admin, False otherwise. Source code in easterobot/bot.py 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def is_super_admin ( self , user : Union [ discord . User , discord . Member ], ) -> bool : \"\"\"Check whether a user is a super admin. Args: user: The Discord user or member to check. Returns: True if the user is a super admin, False otherwise. \"\"\" return ( user . id in self . config . admins or user . id in ( self . owner . id , self . owner_id ) or ( self . owner_ids is not None and user . id in self . owner_ids ) ) on_ready async on_ready () -> None Handle the bot ready event. This may trigger multiple times if the bot reconnects. Source code in easterobot/bot.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 async def on_ready ( self ) -> None : \"\"\"Handle the bot ready event. This may trigger multiple times if the bot reconnects. \"\"\" logger . info ( \"Syncing commands...\" ) await self . tree . sync () self . app_commands = await self . tree . fetch_commands () # Sync bot owner app_info = await self . application_info () self . owner = app_info . owner logger . info ( \"Owner is %s ( %s )\" , self . owner . display_name , self . owner . id ) # Load emojis await self . _load_emojis () # Load eggs eggs_path = ( self . config . resources / \"emotes\" / \"eggs\" ) . resolve () self . egg_emotes = RandomItem ( [ self . app_emojis [ path . stem ] for path in eggs_path . glob ( \"**/*\" )] ) # Log all available guilds async for guild in self . fetch_guilds (): logger . info ( \"Guild %s ( %s )\" , guild , guild . id ) # Log user logger . info ( \"Logged in as %s ( %s )\" , self . user , getattr ( self . user , \"id\" , \"unknown\" ), ) # Set init event as finished self . init_finished . set () resolve_channel async resolve_channel ( channel_id : int , ) -> Optional [ discord . TextChannel ] Get a text channel by its ID. Parameters: channel_id ( int ) \u2013 ID of the channel to fetch. Returns: Optional [ TextChannel ] \u2013 The corresponding text channel, or None if unavailable. Source code in easterobot/bot.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 async def resolve_channel ( self , channel_id : int , ) -> Optional [ discord . TextChannel ]: \"\"\"Get a text channel by its ID. Args: channel_id: ID of the channel to fetch. Returns: The corresponding text channel, or None if unavailable. \"\"\" channel = self . get_channel ( channel_id ) if channel is None : try : channel = await self . fetch_channel ( channel_id ) except ( discord . NotFound , discord . Forbidden ): return None if not isinstance ( channel , discord . TextChannel ): return None return channel setup_hook async setup_hook () -> None Load bot extensions (commands, games, hunts). Source code in easterobot/bot.py 193 194 195 196 197 198 199 200 201 202 203 async def setup_hook ( self ) -> None : \"\"\"Load bot extensions (commands, games, hunts).\"\"\" await self . load_extension ( \"easterobot.commands\" , package = \"easterobot.commands.__init__\" ) await self . load_extension ( \"easterobot.games\" , package = \"easterobot.games.__init__\" ) await self . load_extension ( \"easterobot.hunts\" , package = \"easterobot.hunts.__init__\" ) start async start ( token : str , * , reconnect : bool = True ) -> None Start the bot and initialize the ready event. Parameters: token ( str ) \u2013 Bot authentication token. reconnect ( bool , default: True ) \u2013 Whether to automatically reconnect on disconnect. Source code in easterobot/bot.py 209 210 211 212 213 214 215 216 217 async def start ( self , token : str , * , reconnect : bool = True ) -> None : \"\"\"Start the bot and initialize the ready event. Args: token: Bot authentication token. reconnect: Whether to automatically reconnect on disconnect. \"\"\" self . init_finished = asyncio . Event () await super () . start ( token = token , reconnect = reconnect ) entrypoint entrypoint ( argv : Optional [ Sequence [ str ]] = None ) -> None Entrypoint for command line interface. Source code in easterobot/cli.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def entrypoint ( argv : Optional [ Sequence [ str ]] = None ) -> None : \"\"\"Entrypoint for command line interface.\"\"\" args = list ( sys . argv [ 1 :] if argv is None else argv ) try : parser = get_parser () namespace = parser . parse_args ( args ) if namespace . action == \"run\" : setup_logging ( verbose = namespace . verbose ) bot = Easterobot . from_config ( namespace . config , token = namespace . token , env = namespace . env , ) bot . auto_run () elif namespace . action == \"generate\" : setup_logging ( verbose = namespace . verbose ) Easterobot . generate ( destination = namespace . destination , token = namespace . token , env = namespace . env , interactive = namespace . interactive , ) elif namespace . action == \"alembic\" : if not hasattr ( namespace , \"cmd\" ): # see http://bugs.python.org/issue9253, argparse # behavior changed incompatibly in py3.3 parser . error ( \"too few arguments\" ) else : config = load_config_from_path ( namespace . config ) cfg = config . alembic_config ( namespace ) cmd_alembic . run_cmd ( cfg , namespace ) else : parser . error ( \"No command specified\" ) # pragma: no cover except Exception as err : # NoQA: BLE001 # pragma: no cover setup_logging ( verbose = True ) logger . critical ( \"Unexpected error ( %s , version %s )\" , __project__ , __version__ , exc_info = err , ) logger . critical ( \"Please, report this error to %s .\" , __issues__ ) sys . exit ( 1 )","title":"Developer Interface"},{"location":"developer_interface/#developer-interface","text":"","title":"Developer Interface"},{"location":"developer_interface/#easterobot","text":"Init module of easterobot.","title":"easterobot"},{"location":"developer_interface/#easterobot.Easterobot","text":"Bases: Bot Main Easterobot Discord bot class. Source code in easterobot/bot.pyclass Easterobot ( discord . ext . commands . Bot ): \"\"\"Main Easterobot Discord bot class.\"\"\" owner : discord . User game : GameCog hunt : HuntCog init_finished : asyncio . Event def __init__ ( self , config : MConfig ) -> None : \"\"\"Initialize the Easterobot instance. Args: config: Loaded bot configuration. \"\"\" intents = discord . Intents . default () if config . message_content : intents . message_content = True # Suppress NaCl warnings for voice discord . VoiceClient . warn_nacl = False super () . __init__ ( command_prefix = \".\" , description = \"Bot Discord pour faire la chasse aux \u0153ufs\" , activity = discord . Game ( name = \"rechercher des \u0153ufs\" ), intents = INTENTS , ) self . app_commands : list [ discord . app_commands . AppCommand ] = [] self . app_emojis : dict [ str , discord . Emoji ] = {} self . config = config self . config . configure_logging () # Ensure database schema is up-to-date upgrade ( self . config . alembic_config (), \"head\" ) logger . info ( \"Opening database %s \" , self . config . database_uri ) self . engine = create_async_engine ( self . config . database_uri , echo = False , ) @classmethod def from_config ( cls , path : Union [ str , Path ] = DEFAULT_CONFIG_PATH , * , token : Optional [ str ] = None , env : bool = False , ) -> \"Easterobot\" : \"\"\"Create an instance from a configuration file. Args: path: Path to the configuration file. token: Bot token override. env: If True, load configuration from environment variables. Returns: An initialized `Easterobot` instance. \"\"\" config = load_config_from_path ( path , token = token , env = env ) return Easterobot ( config ) @classmethod def generate ( cls , destination : Union [ Path , str ], * , token : Optional [ str ] = None , env : bool = False , interactive : bool = False , ) -> \"Easterobot\" : \"\"\"Generate a new bot configuration and resources. Args: destination: Directory where the bot's data will be created. token: Bot token override. env: If True, load configuration from environment variables. interactive: If True, prompt user for the bot token. Returns: An initialized `Easterobot` instance. \"\"\" destination = Path ( destination ) . resolve () destination . mkdir ( parents = True , exist_ok = True ) config_data = EXAMPLE_CONFIG_PATH . read_bytes () config = load_config_from_buffer ( config_data , token = token , env = env ) config . attach_default_working_directory ( destination ) if interactive : while True : try : config . verified_token () break except ( ValueError , TypeError ): config . token = getpass ( \"Token: \" ) # Create resources directory config . _resources = pathlib . Path ( \"resources\" ) # noqa: SLF001 shutil . copytree ( RESOURCES , destination / \"resources\" , dirs_exist_ok = True ) # Save configuration config_path = destination / \"config.yml\" config_path . write_bytes ( dump_yaml ( config )) ( destination / \".gitignore\" ) . write_bytes ( b \"* \\n \" ) return Easterobot ( config ) def is_super_admin ( self , user : Union [ discord . User , discord . Member ], ) -> bool : \"\"\"Check whether a user is a super admin. Args: user: The Discord user or member to check. Returns: True if the user is a super admin, False otherwise. \"\"\" return ( user . id in self . config . admins or user . id in ( self . owner . id , self . owner_id ) or ( self . owner_ids is not None and user . id in self . owner_ids ) ) async def resolve_channel ( self , channel_id : int , ) -> Optional [ discord . TextChannel ]: \"\"\"Get a text channel by its ID. Args: channel_id: ID of the channel to fetch. Returns: The corresponding text channel, or None if unavailable. \"\"\" channel = self . get_channel ( channel_id ) if channel is None : try : channel = await self . fetch_channel ( channel_id ) except ( discord . NotFound , discord . Forbidden ): return None if not isinstance ( channel , discord . TextChannel ): return None return channel async def setup_hook ( self ) -> None : \"\"\"Load bot extensions (commands, games, hunts).\"\"\" await self . load_extension ( \"easterobot.commands\" , package = \"easterobot.commands.__init__\" ) await self . load_extension ( \"easterobot.games\" , package = \"easterobot.games.__init__\" ) await self . load_extension ( \"easterobot.hunts\" , package = \"easterobot.hunts.__init__\" ) def auto_run ( self ) -> None : \"\"\"Start the bot using the verified token.\"\"\" self . run ( token = self . config . verified_token ()) async def start ( self , token : str , * , reconnect : bool = True ) -> None : \"\"\"Start the bot and initialize the ready event. Args: token: Bot authentication token. reconnect: Whether to automatically reconnect on disconnect. \"\"\" self . init_finished = asyncio . Event () await super () . start ( token = token , reconnect = reconnect ) async def on_ready ( self ) -> None : \"\"\"Handle the bot ready event. This may trigger multiple times if the bot reconnects. \"\"\" logger . info ( \"Syncing commands...\" ) await self . tree . sync () self . app_commands = await self . tree . fetch_commands () # Sync bot owner app_info = await self . application_info () self . owner = app_info . owner logger . info ( \"Owner is %s ( %s )\" , self . owner . display_name , self . owner . id ) # Load emojis await self . _load_emojis () # Load eggs eggs_path = ( self . config . resources / \"emotes\" / \"eggs\" ) . resolve () self . egg_emotes = RandomItem ( [ self . app_emojis [ path . stem ] for path in eggs_path . glob ( \"**/*\" )] ) # Log all available guilds async for guild in self . fetch_guilds (): logger . info ( \"Guild %s ( %s )\" , guild , guild . id ) # Log user logger . info ( \"Logged in as %s ( %s )\" , self . user , getattr ( self . user , \"id\" , \"unknown\" ), ) # Set init event as finished self . init_finished . set () async def _load_emojis ( self ) -> None : \"\"\"Load or create application emojis from resource files.\"\"\" emojis = { emoji . name : emoji for emoji in await self . fetch_application_emojis () } emotes_path = ( self . config . resources / \"emotes\" ) . resolve () # TODO(dashstrom): Remove outdated emojis. # TODO(dashstrom): Implement emoji caching. self . app_emojis = {} for emote in emotes_path . glob ( \"**/*\" ): if not emote . is_file (): continue name = emote . stem if name not in emojis : logger . info ( \"Missing emoji %s , creating on application...\" , name , ) image_data = emote . read_bytes () emoji = await self . create_application_emoji ( name = name , image = image_data , ) self . app_emojis [ name ] = emoji else : logger . info ( \"Loaded emoji %s \" , name ) self . app_emojis [ name ] = emojis [ name ]","title":"Easterobot"},{"location":"developer_interface/#easterobot.Easterobot.__init__","text":"__init__ ( config : MConfig ) -> None Initialize the Easterobot instance. Parameters: config ( MConfig ) \u2013 Loaded bot configuration. Source code in easterobot/bot.py 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 def __init__ ( self , config : MConfig ) -> None : \"\"\"Initialize the Easterobot instance. Args: config: Loaded bot configuration. \"\"\" intents = discord . Intents . default () if config . message_content : intents . message_content = True # Suppress NaCl warnings for voice discord . VoiceClient . warn_nacl = False super () . __init__ ( command_prefix = \".\" , description = \"Bot Discord pour faire la chasse aux \u0153ufs\" , activity = discord . Game ( name = \"rechercher des \u0153ufs\" ), intents = INTENTS , ) self . app_commands : list [ discord . app_commands . AppCommand ] = [] self . app_emojis : dict [ str , discord . Emoji ] = {} self . config = config self . config . configure_logging () # Ensure database schema is up-to-date upgrade ( self . config . alembic_config (), \"head\" ) logger . info ( \"Opening database %s \" , self . config . database_uri ) self . engine = create_async_engine ( self . config . database_uri , echo = False , )","title":"__init__"},{"location":"developer_interface/#easterobot.Easterobot.auto_run","text":"auto_run () -> None Start the bot using the verified token. Source code in easterobot/bot.py 205 206 207 def auto_run ( self ) -> None : \"\"\"Start the bot using the verified token.\"\"\" self . run ( token = self . config . verified_token ())","title":"auto_run"},{"location":"developer_interface/#easterobot.Easterobot.from_config","text":"from_config ( path : Union [ str , Path ] = DEFAULT_CONFIG_PATH , * , token : Optional [ str ] = None , env : bool = False , ) -> Easterobot Create an instance from a configuration file. Parameters: path ( Union [ str , Path ] , default: DEFAULT_CONFIG_PATH ) \u2013 Path to the configuration file. token ( Optional [ str ] , default: None ) \u2013 Bot token override. env ( bool , default: False ) \u2013 If True, load configuration from environment variables. Returns: Easterobot \u2013 An initialized Easterobot instance. Source code in easterobot/bot.py 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 @classmethod def from_config ( cls , path : Union [ str , Path ] = DEFAULT_CONFIG_PATH , * , token : Optional [ str ] = None , env : bool = False , ) -> \"Easterobot\" : \"\"\"Create an instance from a configuration file. Args: path: Path to the configuration file. token: Bot token override. env: If True, load configuration from environment variables. Returns: An initialized `Easterobot` instance. \"\"\" config = load_config_from_path ( path , token = token , env = env ) return Easterobot ( config )","title":"from_config"},{"location":"developer_interface/#easterobot.Easterobot.generate","text":"generate ( destination : Union [ Path , str ], * , token : Optional [ str ] = None , env : bool = False , interactive : bool = False , ) -> Easterobot Generate a new bot configuration and resources. Parameters: destination ( Union [ Path , str ] ) \u2013 Directory where the bot's data will be created. token ( Optional [ str ] , default: None ) \u2013 Bot token override. env ( bool , default: False ) \u2013 If True, load configuration from environment variables. interactive ( bool , default: False ) \u2013 If True, prompt user for the bot token. Returns: Easterobot \u2013 An initialized Easterobot instance. Source code in easterobot/bot.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 @classmethod def generate ( cls , destination : Union [ Path , str ], * , token : Optional [ str ] = None , env : bool = False , interactive : bool = False , ) -> \"Easterobot\" : \"\"\"Generate a new bot configuration and resources. Args: destination: Directory where the bot's data will be created. token: Bot token override. env: If True, load configuration from environment variables. interactive: If True, prompt user for the bot token. Returns: An initialized `Easterobot` instance. \"\"\" destination = Path ( destination ) . resolve () destination . mkdir ( parents = True , exist_ok = True ) config_data = EXAMPLE_CONFIG_PATH . read_bytes () config = load_config_from_buffer ( config_data , token = token , env = env ) config . attach_default_working_directory ( destination ) if interactive : while True : try : config . verified_token () break except ( ValueError , TypeError ): config . token = getpass ( \"Token: \" ) # Create resources directory config . _resources = pathlib . Path ( \"resources\" ) # noqa: SLF001 shutil . copytree ( RESOURCES , destination / \"resources\" , dirs_exist_ok = True ) # Save configuration config_path = destination / \"config.yml\" config_path . write_bytes ( dump_yaml ( config )) ( destination / \".gitignore\" ) . write_bytes ( b \"* \\n \" ) return Easterobot ( config )","title":"generate"},{"location":"developer_interface/#easterobot.Easterobot.is_super_admin","text":"is_super_admin ( user : Union [ User , Member ]) -> bool Check whether a user is a super admin. Parameters: user ( Union [ User , Member ] ) \u2013 The Discord user or member to check. Returns: bool \u2013 True if the user is a super admin, False otherwise. Source code in easterobot/bot.py 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 def is_super_admin ( self , user : Union [ discord . User , discord . Member ], ) -> bool : \"\"\"Check whether a user is a super admin. Args: user: The Discord user or member to check. Returns: True if the user is a super admin, False otherwise. \"\"\" return ( user . id in self . config . admins or user . id in ( self . owner . id , self . owner_id ) or ( self . owner_ids is not None and user . id in self . owner_ids ) )","title":"is_super_admin"},{"location":"developer_interface/#easterobot.Easterobot.on_ready","text":"on_ready () -> None Handle the bot ready event. This may trigger multiple times if the bot reconnects. Source code in easterobot/bot.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 async def on_ready ( self ) -> None : \"\"\"Handle the bot ready event. This may trigger multiple times if the bot reconnects. \"\"\" logger . info ( \"Syncing commands...\" ) await self . tree . sync () self . app_commands = await self . tree . fetch_commands () # Sync bot owner app_info = await self . application_info () self . owner = app_info . owner logger . info ( \"Owner is %s ( %s )\" , self . owner . display_name , self . owner . id ) # Load emojis await self . _load_emojis () # Load eggs eggs_path = ( self . config . resources / \"emotes\" / \"eggs\" ) . resolve () self . egg_emotes = RandomItem ( [ self . app_emojis [ path . stem ] for path in eggs_path . glob ( \"**/*\" )] ) # Log all available guilds async for guild in self . fetch_guilds (): logger . info ( \"Guild %s ( %s )\" , guild , guild . id ) # Log user logger . info ( \"Logged in as %s ( %s )\" , self . user , getattr ( self . user , \"id\" , \"unknown\" ), ) # Set init event as finished self . init_finished . set ()","title":"on_ready"},{"location":"developer_interface/#easterobot.Easterobot.resolve_channel","text":"resolve_channel ( channel_id : int , ) -> Optional [ discord . TextChannel ] Get a text channel by its ID. Parameters: channel_id ( int ) \u2013 ID of the channel to fetch. Returns: Optional [ TextChannel ] \u2013 The corresponding text channel, or None if unavailable. Source code in easterobot/bot.py 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 async def resolve_channel ( self , channel_id : int , ) -> Optional [ discord . TextChannel ]: \"\"\"Get a text channel by its ID. Args: channel_id: ID of the channel to fetch. Returns: The corresponding text channel, or None if unavailable. \"\"\" channel = self . get_channel ( channel_id ) if channel is None : try : channel = await self . fetch_channel ( channel_id ) except ( discord . NotFound , discord . Forbidden ): return None if not isinstance ( channel , discord . TextChannel ): return None return channel","title":"resolve_channel"},{"location":"developer_interface/#easterobot.Easterobot.setup_hook","text":"setup_hook () -> None Load bot extensions (commands, games, hunts). Source code in easterobot/bot.py 193 194 195 196 197 198 199 200 201 202 203 async def setup_hook ( self ) -> None : \"\"\"Load bot extensions (commands, games, hunts).\"\"\" await self . load_extension ( \"easterobot.commands\" , package = \"easterobot.commands.__init__\" ) await self . load_extension ( \"easterobot.games\" , package = \"easterobot.games.__init__\" ) await self . load_extension ( \"easterobot.hunts\" , package = \"easterobot.hunts.__init__\" )","title":"setup_hook"},{"location":"developer_interface/#easterobot.Easterobot.start","text":"start ( token : str , * , reconnect : bool = True ) -> None Start the bot and initialize the ready event. Parameters: token ( str ) \u2013 Bot authentication token. reconnect ( bool , default: True ) \u2013 Whether to automatically reconnect on disconnect. Source code in easterobot/bot.py 209 210 211 212 213 214 215 216 217 async def start ( self , token : str , * , reconnect : bool = True ) -> None : \"\"\"Start the bot and initialize the ready event. Args: token: Bot authentication token. reconnect: Whether to automatically reconnect on disconnect. \"\"\" self . init_finished = asyncio . Event () await super () . start ( token = token , reconnect = reconnect )","title":"start"},{"location":"developer_interface/#easterobot.entrypoint","text":"entrypoint ( argv : Optional [ Sequence [ str ]] = None ) -> None Entrypoint for command line interface. Source code in easterobot/cli.py 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 def entrypoint ( argv : Optional [ Sequence [ str ]] = None ) -> None : \"\"\"Entrypoint for command line interface.\"\"\" args = list ( sys . argv [ 1 :] if argv is None else argv ) try : parser = get_parser () namespace = parser . parse_args ( args ) if namespace . action == \"run\" : setup_logging ( verbose = namespace . verbose ) bot = Easterobot . from_config ( namespace . config , token = namespace . token , env = namespace . env , ) bot . auto_run () elif namespace . action == \"generate\" : setup_logging ( verbose = namespace . verbose ) Easterobot . generate ( destination = namespace . destination , token = namespace . token , env = namespace . env , interactive = namespace . interactive , ) elif namespace . action == \"alembic\" : if not hasattr ( namespace , \"cmd\" ): # see http://bugs.python.org/issue9253, argparse # behavior changed incompatibly in py3.3 parser . error ( \"too few arguments\" ) else : config = load_config_from_path ( namespace . config ) cfg = config . alembic_config ( namespace ) cmd_alembic . run_cmd ( cfg , namespace ) else : parser . error ( \"No command specified\" ) # pragma: no cover except Exception as err : # NoQA: BLE001 # pragma: no cover setup_logging ( verbose = True ) logger . critical ( \"Unexpected error ( %s , version %s )\" , __project__ , __version__ , exc_info = err , ) logger . critical ( \"Please, report this error to %s .\" , __issues__ ) sys . exit ( 1 )","title":"entrypoint"}]}