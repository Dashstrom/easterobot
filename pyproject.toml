# ----------------------------------------------------------------------
# Packaging
# https://packaging.python.org/en/latest/tutorials/packaging-projects
# ----------------------------------------------------------------------

[build-system]
requires = ["hatchling >= 1.27"]
build-backend = "hatchling.build"

# ----------------------------------------------------------------------
[tool.hatch.build.targets.wheel]
packages = ["easterobot"]


# ----------------------------------------------------------------------
# uv
# https://github.com/astral-sh/uv
# ----------------------------------------------------------------------

[project]
name = "easterobot"
version = "1.5.2"
description = "Discord bot for easter."
authors = [
  { name = "Dashstrom", email = "dashstrom.pro@gmail.com" }
]
maintainers = [
  { name = "Dashstrom", email = "dashstrom.pro@gmail.com" }
]
license = "MIT"
dependencies = [
  "discord.py>=2.5.2",
  "sqlalchemy[asyncio]>=2.0.40",
  "PyYAML>=6.0.2",
  "asyncpg>=0.30.0",
  "aiosqlite>=0.21.0",
  "msgspec>=0.19.0",
  "alembic>=1.15.2",
]
readme = "README.md"
requires-python = ">=3.10,<4.0"
keywords = ["discord", "bot", "easter", "eggs", "hunt"]

# See https://pypi.org/classifiers/
classifiers = [

  #"Development Status :: 1 - Planning",
  #"Development Status :: 2 - Pre-Alpha",
  #"Development Status :: 3 - Alpha",
  "Development Status :: 4 - Beta",
  #"Development Status :: 5 - Production/Stable",
  #"Development Status :: 6 - Mature",
  #"Development Status :: 7 - Inactive",

  # Default usage
  "Environment :: Console",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",

  # Target OS
  "Operating System :: OS Independent",

  # Version available for this project
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: 3 :: Only",

  # What is the language used in the project
  "Natural Language :: English",

  # The project is typed
  "Typing :: Typed"
]

[project.urls]
Homepage = "https://github.com/Dashstrom/easterobot"
Issues = "https://github.com/Dashstrom/easterobot/issues"
Documentation = "https://dashstrom.github.io/easterobot"
Source = "https://github.com/Dashstrom/easterobot"

[project.scripts]
easterobot = "easterobot.cli:entrypoint"

[dependency-groups]
dev = [
  # Task runner
  "poethepoet==0.36.0",

  # Pre-commit
  "pre-commit==4.2.0",
  "pre-commit-hooks==5.0.0",

  # Documentation
  "mkdocs==1.6.1",
  "mkdocstrings[python]==0.30.0",
  "pymdown-extensions==10.16.1",

  # Typer
  "mypy==1.17.1",
  "types-PyYAML==6.0.12.20250326",
  "types-requests==2.32.0.20250328",

  # Linter
  "ruff==0.12.8",

  # Tests
  "coverage[toml]==7.10.2",
  "pytest-cov==6.2.1",
  "pytest==8.4.1",
  "pytest-mock==3.14.1",
  "pytest-asyncio==1.1.0",

  # Scripts
  "pillow==11.3.0",
  "opencv-python==4.12.0.88",
  "numpy==2.2.6",
]

[tool.setuptools]
py-modules = ["easterobot"]

# ----------------------------------------------------------------------
# Poe the Poet
# https://poethepoet.natn.io/index.html
# ----------------------------------------------------------------------

[tool.poe.tasks.test]
help = "Run test suite."
cmd = "pytest"

[tool.poe.tasks.lint]
help = "Run linters: ruff checker and ruff formatter and mypy."
sequence = [
  { cmd = "ruff check ." },
  { cmd = "ruff format --diff ." },
  { cmd = "mypy ." },
]
ignore_fail = true

[tool.poe.tasks.format]
help = "Run linters in fix mode."
sequence = [
  { cmd = "ruff check --fix --unsafe-fixes ." },
  { cmd = "ruff format ." },
  { cmd = "mypy ." },
]
ignore_fail = true

[tool.poe.tasks.check]
help = "Run all checks: lint, test and docs."
sequence = [
  { ref = "lint" },
  { ref = "test" },
  { ref = "doc" },
]

[tool.poe.tasks.check-tag]
help = "Check if the current tag match the version."
expr = """
sys.exit(
    subprocess.run(
        ['git', 'describe', '--exact-match', '--tags'],
        text=True,
        stderr=subprocess.DEVNULL,
        stdout=subprocess.PIPE,
    ).stdout.strip()
    != 'v' + easterobot.__version__
)
"""
imports = ["easterobot", "subprocess", "os"]


[tool.poe.tasks.cov]
help = "Run coverage for generate report and html."
sequence = [
  { cmd = "coverage run -m pytest" },
  { cmd = "coverage report" },
  { cmd = "coverage html" },
]

[tool.poe.tasks.open-cov]
help = "Open html coverage report in webbrowser."
deps = ["cov"]
expr = "webbrowser.open('file:'+urllib.request.pathname2url(os.path.abspath('htmlcov/index.html')),new=2)"
imports = ["os", "webbrowser", "sys", "urllib.request"]

[tool.poe.tasks.doc]
help = "Build documentation."
cmd = "mkdocs build"

[tool.poe.tasks.open-doc]
help = "Open documentation in webbrowser."
cmd = "mkdocs serve"

[tool.poe.tasks.setup]
help = "Setup pre-commit."
cmd = "pre-commit install"

[tool.poe.tasks.pre-commit]
help = "Run pre-commit."
cmd = "pre-commit run --all-files --show-diff-on-failure"

[tool.poe.tasks.clean]
help = "Clean cache files."
expr = """[
  shutil.rmtree(path, ignore_errors=False)
  if path.is_dir()
  else path.unlink()
  for pattern in [
    'build/',
    'dist/',
    'public/',
    'site/',
    '.eggs/',
    '.tox/',
    '.coverage',
    'htmlcov/',
    '.pytest_cache',
    '.mypy_cache',
    '.ruff_cache',
    '**/*.egg-info',
    '**/*.egg',
    '**/__pycache__',
    '**/*~',
    '**/*.pyc',
    '**/*.pyo'
  ]
  for path in pathlib.Path().resolve().glob(pattern)
]"""
imports = ["shutil", "sys", "pathlib"]


# ----------------------------------------------------------------------
# Pytest
# https://docs.pytest.org
# ----------------------------------------------------------------------

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "WARNING"
addopts = "-vvv --doctest-modules --ignore=easterobot/alembic"
doctest_optionflags = "DONT_ACCEPT_TRUE_FOR_1 NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS"
#asyncio_mode = "auto"


# ----------------------------------------------------------------------
# Coverage
# https://coverage.readthedocs.io/en/7.3.2/config.html
# ----------------------------------------------------------------------

[tool.coverage.run]
source = ["easterobot"]


# ----------------------------------------------------------------------
# Mypy
# https://pypi.org/project/mypy
# ----------------------------------------------------------------------

[tool.mypy]
python_version = "3.10"
exclude = [
  ".bzr",
  ".direnv",
  "site",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]
enable_error_code = ["ignore-without-code", "truthy-bool", "redundant-expr"]

# Disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false  # All attribut of argparse.Namespace are Any
disallow_any_decorated = false  # Too many package doesn't have typed decorator
disallow_any_generics = true
disallow_subclassing_any = true

# Disallow untyped definitions and calls
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = false  # Too many decorator are untyped

# None and optional handling
no_implicit_optional = true

# Configuring warnings
warn_unused_ignores = true
warn_no_return = true
warn_return_any = true
warn_redundant_casts = true

# Misc things
strict_equality = true

# Config file
warn_unused_configs = true

# Missing types
[[tool.mypy.overrides]]
module = ["py.*"]
ignore_missing_imports = true


# ----------------------------------------------------------------------
# Ruff
# https://pypi.org/project/ruff
# ----------------------------------------------------------------------

[tool.ruff]
line-length = 79
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
# D203 and D211 are incompatible
# D212 and D213 are incompatible
# D400 [*] First line should end with a period
# We dont use ANN : flake8-annotations because we already have mypy
# TD003 Missing issue link for this TODO
# FIX002 Line contains TODO, consider resolving the issue
# warning: The following rule may cause conflicts when used with the formatter: `COM812`.
ignore = ["D203", "D213", "D400", "ANN", "TD003", "FIX002", "COM812"]
fixable = ["ALL"]
unfixable = []
exclude = [
  ".bzr",
  ".direnv",
  "site",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# E402 Module level import not at top of file
# INP001 File `docs\conf.py` is part of an implicit namespace package. Add an `__init__.py`.
# A001 Variable `copyright` is shadowing a python builtin
# PTH100 `os.path.abspath()` should be replaced by `Path.resolve()`
"docs/conf.py" = ["E402", "INP001", "A001", "PTH100"]
# S101 Use of `assert` detected
# S603 `subprocess` call: check for execution of untrusted input
# D102 undocumented-public-method
# D103 undocumented-public-function
"tests/*.py" = ["S101", "S603", "D102", "D103"]
"conftest.py" = ["S101", "S603", "D102", "D103"]
# Q003 [*] Change outer quotes to avoid escaping inner quotes
# E501 Line too long
"*/info.py" = ["Q003", "E501"]
# E501 Line too long
"*/__main__.py" = ["E501"]
# INP001 File `benchmarks/*.py` is part of an implicit namespace package. Add an `__init__.py`.
"benchmarks/*.py" = ["INP001"]
# INP001 File `scripts/*.py` is part of an implicit namespace package. Add an `__init__.py`.
# T201 `print` found
"scripts/*.py" = ["INP001", "T201"]

[tool.ruff.lint.isort]
known-first-party = ["easterobot"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 12.
max-complexity = 12

[tool.ruff.lint.pylint]
max-args = 10


# ----------------------------------------------------------------------
# Pylint
# https://pylint.pycqa.org/en/latest/index.html
# ----------------------------------------------------------------------

# Ruff replaces Pylint
[tool.pylint.main]
ignore-patterns = ["*"]


# ----------------------------------------------------------------------
# Black
# https://black.readthedocs.io/en/stable/
# ----------------------------------------------------------------------

# Ruff replaces Black
[tool.black]
exclude="*"
